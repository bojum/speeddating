[
["index.html", "How to Get More Matches in Speed Dating Chapter 1 Introduction", " How to Get More Matches in Speed Dating Yingyu Cao (yy3713), Bo Jumrustanasan (pj2356), Michael Qi (zq2175) 2019-12-12 Chapter 1 Introduction library(knitr) library(kableExtra) library(tidyverse) ## to locally render the book bookdown::render_book(&quot;index.Rmd&quot;) browseURL(&quot;docs/index.html&quot;) "],
["data-sources.html", "Chapter 2 Data sources 2.1 Experimental Design 2.2 Data Description", " Chapter 2 Data sources The dataset for our project is speed dating dataset provided by Anna Montoya. It is publicly available on Data.com as an excel file. The data contains information about match and questionnaire from a speed dating experiment in 2002-2004 that was run by professors Ray Fisman and Sheena Iyengar from Columbia Business School. The primamry purpose of the collection was for their paper Gender Differences in Mate Selection: Evidence From a Speed Dating Experiment. 2.1 Experimental Design The experiment is design based on Speed Dating which is an event where participants have a four-minute conversation and decide if they want to meet each other again. They will get the other’s contact information only if both parties “accept”. Subjects in the experiments were students in graduate and professional school at Columbia University during the time of the experiment. They learned about the event through mass e-mail and fliers on distributed on campus. They had to sign up for the event by providing the experimentors with their names and email addresses and completing a pre-event survey ononline website. There were 20 sessions of the experiment, all of which had the same setting. All participants were randomly assigned to one of the sessions. On the session day, participants who are unawared of the total number of participants on that day had to fill in a scorecard that contains Spaces to write the ID number of each person they met Yes/No whether a subject wants to meet the person again Six attributes on which a subject was to rate the person they met. The attributes are: Attractive Sincere Intelligent Fun Ambitious Shared Interests There were roughly the same number of female and male participants in each sessions. Subjects only had conversation with those of different genders. Female subjects would meet all male subjects in the session. The scorecard was to be filled after each four-minute conversation. The day after the Speed Dating event, particiapants were asked to complete the follow-up online questionaire in order to obtain their matches. For more detail on the experiment procedure, please check out the study. 2.2 Data Description data_dict &lt;- read.csv(file = &quot;data/data_dict_df.csv&quot;) %&gt;% select(Variable_Name, Description) data_dict %&gt;% kable %&gt;% kable_styling() %&gt;% kableExtra::scroll_box(width = &quot;100%&quot;, height = &quot;400px&quot;) Variable_Name Description iid unique subject number, wave Session number gender female/male race Race of a subject Black/African American=1 European/Caucasian-American=2 Latino/Hispanic American=3 Asian/Pacific Islander/Asian-American=4 Native American=5 Other=6 from Where are you from originally (before coming to Columbia)? field Field of study field_cd Field code 1= Law 2= Math 3= Social Science, Psychologist 4= Medical Science, Pharmaceuticals, and Bio Tech 5= Engineering 6= English/Creative Writing/ Journalism 7= History/Religion/Philosophy 8= Business/Econ/Finance 9= Education, Academia 10= Biological Sciences/Chemistry/Physics 11= Social Work 12= Undergrad/undecided 13=Political Science/International Affairs 14=Film 15=Fine Arts/Arts Administration 16=Languages 17=Architecture 18=Other How interested are you in the following activities, on a scale of 1-10? sports tvsports exercise dining museums art hiking gaming clubbing reading tv theater movies concerts music shopping yoga You have 100 points to distribute among the following attributes – give more points to those attributes that are more important in a potential date, and fewer points to those attributes that are less important in a potential date. Total points must equal 100. what you look for in the opposite sex. attr1_1 sinc1_1 intel1_1 fun1_1 amb1_1 shar1_1 How do you think you measure up? Please rate your opinion of your own attributes, on a scale of 1-10 (be honest!): attr3_1 sinc3_1 fun3_1 intel3_1 amb3_1 pid partner’s iid number match dec_o samerace race_o race of partner attr1_2 sinc1_2 intel1_2 fun1_2 amb1_2 shar1_2 attr3_2 sinc3_2 intel3_2 fun3_2 amb3_2 attr1_3 sinc1_3 intel1_3 fun1_3 amb1_3 shar1_3 attr3_3 sinc3_3 intel3_3 fun3_3 amb3_3 attr sinc intel fun amb shar like prob For more information about the data, see the metadata from the dataset provider. "],
["data-transformation.html", "Chapter 3 Data transformation", " Chapter 3 Data transformation The raw dataset contains 195 variables with 8378 rows. Only a subset of 195 variables are included in our analysis (more detail for this step in data transformation section). Below is a script file that we use to clean the dataset. speed_dating &lt;- raw_dat %&gt;% select(iid,wave,gender,age,race,from,field,field_cd,undergra,mn_sat,tuition,income, imprace,expnum, sports:yoga, attr1_1:shar1_1, # exp weight to others-1 attr1_s:shar1_s, # exp weight to others-2 attr3_1:amb3_1, # self-evaluate-1 (self)-1 attr3_s:amb3_s, # self-evaluate-1 (self)-2 attr5_1:amb5_1, # self-evaluate-2 (others)-1 wave,pid,met_o,match,dec_o,int_corr,samerace,age_o,race_o, pf_o_att:pf_o_sha, # score to others attr_o:shar_o,like_o,prob_o, # score received attr1_2:shar1_2, # exp weight to others-3 attr3_2:amb3_2, # self-evaluate-1 (self)-3 attr5_2:amb5_2, # self-evaluate-2 (others)-2 you_call,them_cal, attr1_3:shar1_3, # exp weight to others-4 attr3_3:amb3_3, # self-evaluate-1 (self)-4 attr5_3:amb5_3, # self-evaluate-2 (others)-3 attr:shar,like,prob ) # add indicator columns # operate row by row for (i in 1:nrow(speed_dating)) { # for each row, get partner&#39;s id pid = speed_dating[i, &#39;pid&#39;] # add temporary columns that holds partner&#39;s location, field, sports, reading, movies speed_dating[i, &#39;plocation&#39;] = speed_dating[which(speed_dating$iid == pid)[1], &#39;from&#39;] speed_dating[i, &#39;pfield&#39;] = speed_dating[which(speed_dating$iid == pid)[1], &#39;field&#39;] speed_dating[i, &#39;psports&#39;] = speed_dating[which(speed_dating$iid == pid)[1], &#39;sports&#39;] speed_dating[i, &#39;preading&#39;] = speed_dating[which(speed_dating$iid == pid)[1], &#39;reading&#39;] speed_dating[i, &#39;pmovies&#39;] = speed_dating[which(speed_dating$iid == pid)[1], &#39;movies&#39;] } # append indicator columns that indicates whether this person and his/her partner share this feature speed_dating[&#39;samelocation&#39;] &lt;- if_else(speed_dating$from == speed_dating$plocation, &#39;Yes&#39;, &#39;No&#39;) speed_dating[&#39;samefield&#39;] &lt;- if_else(speed_dating$field == speed_dating$pfield, &#39;Yes&#39;, &#39;No&#39;) speed_dating[&#39;samesports&#39;] &lt;- if_else(speed_dating$psports &gt;=7 &amp; speed_dating$sports&gt;=7, &#39;Yes&#39;, &#39;No&#39;) speed_dating[&#39;samereading&#39;] &lt;- if_else(speed_dating$preading &gt;=7 &amp; speed_dating$reading&gt;=7, &#39;Yes&#39;, &#39;No&#39;) speed_dating[&#39;samemovies&#39;] &lt;- if_else(speed_dating$pmovies &gt;=7 &amp; speed_dating$movies&gt;=7, &#39;Yes&#39;, &#39;No&#39;) # drop unecessary columns and missing data drops = c(&#39;plocation&#39;, &#39;pfield&#39;, &#39;psports&#39;, &#39;preading&#39;, &#39;pmovies&#39;) keeps = c(&#39;samerace&#39;, &#39;samelocation&#39;, &#39;samefield&#39;, &#39;samesports&#39;, &#39;samesports&#39;, &#39;samemovies&#39;) speed_dating &lt;- speed_dating[ , !(names(speed_dating) %in% drops)] speed_dating &lt;- speed_dating[complete.cases(speed_dating[,keeps]), ] "],
["missing-values.html", "Chapter 4 Missing values", " Chapter 4 Missing values "],
["results.html", "Chapter 5 Results 5.1 Question: Will backrgound and common interests influence the match? Which feature is the most influential?", " Chapter 5 Results 5.1 Question: Will backrgound and common interests influence the match? Which feature is the most influential? To answer this question, we have to look at background and common interests seperately. Background includes three features: race, from, and field. We can do so by comparing the chance of matching by conditioning on whether they are from the same race, same from (location), and same field. Data Cleaning: we would like to append 6 indicator columns that indicates whether this person and his/her partner share that feature in common (actually 5 because samerace is available in the original data). library(ggplot2) library(tidyverse) library(vcd) library(jsonlite) load(&#39;data/speed_dating.RData&#39;) # get feature values of the partner for (i in 1:nrow(speed_dating)) { # for each row, get partner&#39;s id pid = speed_dating[i, &#39;pid&#39;] # add temporary columns that holds partner&#39;s location, field, sports, reading, movies speed_dating[i, &#39;plocation&#39;] = speed_dating[which(speed_dating$iid == pid)[1], &#39;from&#39;] speed_dating[i, &#39;pfield&#39;] = speed_dating[which(speed_dating$iid == pid)[1], &#39;field&#39;] } # append indicator columns for location, field, and income speed_dating[&#39;samelocation&#39;] &lt;- if_else(speed_dating$from == speed_dating$plocation, &#39;Yes&#39;, &#39;No&#39;) speed_dating[&#39;samefield&#39;] &lt;- if_else(speed_dating$field == speed_dating$pfield, &#39;Yes&#39;, &#39;No&#39;) # get the feature values of all the hobbies of the partner f &lt;- function(x){ tmp &lt;- data.frame(&quot;holder&quot; = 1:dim(speed_dating)[1]) result &lt;- data.frame(&quot;holder&quot; = 1:dim(speed_dating)[1]) for (i in 1:nrow(speed_dating)){ pid = speed_dating[i, &#39;pid&#39;] tmp[i,1] &lt;- speed_dating[which(speed_dating$iid == pid)[1], x] } for (i in 1:nrow(speed_dating)) { result[i,1] &lt;- if_else((tmp[i,1] &gt;=7 &amp; speed_dating[i,x]&gt;=7), &#39;Yes&#39;, &#39;No&#39;) } return(result) } names = colnames(speed_dating %&gt;% select(sports:yoga)) common_features &lt;- as.data.frame(do.call(cbind,lapply(names, f))) colnames(common_features)&lt;- paste0(&#39;same&#39;,colnames(speed_dating %&gt;% select(sports:yoga))) speed_dating &lt;- cbind(speed_dating, common_features) speed_dating &lt;- speed_dating[, !duplicated(colnames(speed_dating))] # drop unecessary columns and missing data drops = c(&#39;plocation&#39;, &#39;pfield&#39;) keeps = append(colnames(speed_dating %&gt;% select(sports:yoga)), c(&#39;samelocation&#39;, &#39;samefield&#39;)) speed_dating &lt;- speed_dating[complete.cases(speed_dating[,keeps]), ] ## end here # for mosaic plot # create a clean dataframe for each common feature sameracedata = speed_dating %&gt;% group_by(samerace, match) %&gt;% summarise(Freq = n()) %&gt;% ungroup() %&gt;% mutate(samerace = if_else(samerace == 1, &quot;Yes&quot;, &quot;No&quot;)) %&gt;% mutate(match = if_else(match == 1, &quot;Yes&quot;, &quot;No&quot;)) samelocationdata = speed_dating %&gt;% group_by(samelocation, match) %&gt;% summarize(Freq = n()) %&gt;% ungroup() %&gt;% mutate(match = if_else(match == 1, &quot;Yes&quot;, &quot;No&quot;)) samefielddata = speed_dating %&gt;% group_by(samefield, match) %&gt;% summarize(Freq = n()) %&gt;% ungroup() %&gt;% mutate(match = if_else(match == 1, &quot;Yes&quot;, &quot;No&quot;)) samesportsdata = speed_dating %&gt;% group_by(samesports, match) %&gt;% summarize(Freq = n()) %&gt;% ungroup() %&gt;% mutate(match = if_else(match == 1, &quot;Yes&quot;, &quot;No&quot;)) samereadingdata = speed_dating %&gt;% group_by(samereading, match) %&gt;% summarize(Freq = n()) %&gt;% ungroup() %&gt;% mutate(match = if_else(match == 1, &quot;Yes&quot;, &quot;No&quot;)) samemoviesdata = speed_dating %&gt;% group_by(samemovies, match) %&gt;% summarize(Freq = n()) %&gt;% ungroup() %&gt;% mutate(match = if_else(match == 1, &quot;Yes&quot;, &quot;No&quot;)) cat( paste( &#39;&lt;script&gt; var sameracedata = &#39;,toJSON(sameracedata),&#39;; var samelocationdata = &#39;,toJSON(samelocationdata),&#39;; var samefielddata = &#39;,toJSON(samefielddata),&#39;; var samesportsdata = &#39;,toJSON(samesportsdata),&#39;; var samereadingdata = &#39;,toJSON(samereadingdata),&#39;; var samemoviesdata = &#39;,toJSON(samemoviesdata),&#39;; &lt;/script&gt;&#39; , sep=&quot;&quot;) ) ## &lt;script&gt; ## var sameracedata = [{&quot;samerace&quot;:&quot;No&quot;,&quot;match&quot;:&quot;No&quot;,&quot;Freq&quot;:4128},{&quot;samerace&quot;:&quot;No&quot;,&quot;match&quot;:&quot;Yes&quot;,&quot;Freq&quot;:786},{&quot;samerace&quot;:&quot;Yes&quot;,&quot;match&quot;:&quot;No&quot;,&quot;Freq&quot;:2732},{&quot;samerace&quot;:&quot;Yes&quot;,&quot;match&quot;:&quot;Yes&quot;,&quot;Freq&quot;:564}]; ## var samelocationdata = [{&quot;samelocation&quot;:&quot;No&quot;,&quot;match&quot;:&quot;No&quot;,&quot;Freq&quot;:6796},{&quot;samelocation&quot;:&quot;No&quot;,&quot;match&quot;:&quot;Yes&quot;,&quot;Freq&quot;:1336},{&quot;samelocation&quot;:&quot;Yes&quot;,&quot;match&quot;:&quot;No&quot;,&quot;Freq&quot;:64},{&quot;samelocation&quot;:&quot;Yes&quot;,&quot;match&quot;:&quot;Yes&quot;,&quot;Freq&quot;:14}]; ## var samefielddata = [{&quot;samefield&quot;:&quot;No&quot;,&quot;match&quot;:&quot;No&quot;,&quot;Freq&quot;:6738},{&quot;samefield&quot;:&quot;No&quot;,&quot;match&quot;:&quot;Yes&quot;,&quot;Freq&quot;:1300},{&quot;samefield&quot;:&quot;Yes&quot;,&quot;match&quot;:&quot;No&quot;,&quot;Freq&quot;:122},{&quot;samefield&quot;:&quot;Yes&quot;,&quot;match&quot;:&quot;Yes&quot;,&quot;Freq&quot;:50}]; ## var samesportsdata = [{&quot;samesports&quot;:&quot;No&quot;,&quot;match&quot;:&quot;No&quot;,&quot;Freq&quot;:4904},{&quot;samesports&quot;:&quot;No&quot;,&quot;match&quot;:&quot;Yes&quot;,&quot;Freq&quot;:900},{&quot;samesports&quot;:&quot;Yes&quot;,&quot;match&quot;:&quot;No&quot;,&quot;Freq&quot;:1956},{&quot;samesports&quot;:&quot;Yes&quot;,&quot;match&quot;:&quot;Yes&quot;,&quot;Freq&quot;:450}]; ## var samereadingdata = [{&quot;samereading&quot;:&quot;No&quot;,&quot;match&quot;:&quot;No&quot;,&quot;Freq&quot;:2902},{&quot;samereading&quot;:&quot;No&quot;,&quot;match&quot;:&quot;Yes&quot;,&quot;Freq&quot;:524},{&quot;samereading&quot;:&quot;Yes&quot;,&quot;match&quot;:&quot;No&quot;,&quot;Freq&quot;:3958},{&quot;samereading&quot;:&quot;Yes&quot;,&quot;match&quot;:&quot;Yes&quot;,&quot;Freq&quot;:826}]; ## var samemoviesdata = [{&quot;samemovies&quot;:&quot;No&quot;,&quot;match&quot;:&quot;No&quot;,&quot;Freq&quot;:2008},{&quot;samemovies&quot;:&quot;No&quot;,&quot;match&quot;:&quot;Yes&quot;,&quot;Freq&quot;:448},{&quot;samemovies&quot;:&quot;Yes&quot;,&quot;match&quot;:&quot;No&quot;,&quot;Freq&quot;:4852},{&quot;samemovies&quot;:&quot;Yes&quot;,&quot;match&quot;:&quot;Yes&quot;,&quot;Freq&quot;:902}]; ## &lt;/script&gt; We then look at all the available features that could be of common interest in the dataset, and see if any of those features heavily impacts the chances of getting matched. calc_diff &lt;- function(x){ tmp &lt;- speed_dating %&gt;% group_by_(x, &#39;match&#39;) %&gt;% summarize(Freq = n()) %&gt;% ungroup() %&gt;% mutate(match = if_else(match == 1, &quot;Yes&quot;, &quot;No&quot;)) no_rate &lt;- tmp[2,3]/(tmp[2,3]+tmp[1,3]) yes_rate &lt;- tmp[4,3]/(tmp[3,3]+tmp[4,3]) return(yes_rate - no_rate) } cd_df &lt;- do.call(rbind,lapply(paste0(&#39;same&#39;,colnames(speed_dating %&gt;% select(sports:yoga))),calc_diff))*100 cd_df &lt;- cbind(cd_df, names) ggplot(cd_df,aes(x=Freq,y=fct_reorder(names,Freq)))+geom_point(color=&quot;blue&quot;)+ylab(&quot;&quot;)+xlab(&quot;Percent (%)&quot;)+ggtitle(&quot;Differences in Chance of Matching&quot;) "],
["interactive-component.html", "Chapter 6 Interactive component", " Chapter 6 Interactive component "],
["conclusion.html", "Chapter 7 Conclusion 7.1 Question: Will backrgound and common interests influence the match? Which feature is the most influential?", " Chapter 7 Conclusion 7.1 Question: Will backrgound and common interests influence the match? Which feature is the most influential? To answer this question, we have to look at background and common interests seperately. Background includes three features: race, from, and field. We can do so by comparing the chance of matching by conditioning on whether they are from the same race, same from (location), and same field. Data Cleaning: we would like to append 6 indicator columns that indicates whether this person and his/her partner share that feature in common (actually 5 because samerace is available in the original data). library(ggplot2) library(tidyverse) library(vcd) library(jsonlite) load(&#39;data/speed_dating.RData&#39;) # get feature values of the partner for (i in 1:nrow(speed_dating)) { # for each row, get partner&#39;s id pid = speed_dating[i, &#39;pid&#39;] # add temporary columns that holds partner&#39;s location, field, sports, reading, movies speed_dating[i, &#39;plocation&#39;] = speed_dating[which(speed_dating$iid == pid)[1], &#39;from&#39;] speed_dating[i, &#39;pfield&#39;] = speed_dating[which(speed_dating$iid == pid)[1], &#39;field&#39;] } # append indicator columns for location, field, and income speed_dating[&#39;samelocation&#39;] &lt;- if_else(speed_dating$from == speed_dating$plocation, &#39;Yes&#39;, &#39;No&#39;) speed_dating[&#39;samefield&#39;] &lt;- if_else(speed_dating$field == speed_dating$pfield, &#39;Yes&#39;, &#39;No&#39;) # get the feature values of all the hobbies of the partner f &lt;- function(x){ tmp &lt;- data.frame(&quot;holder&quot; = 1:dim(speed_dating)[1]) result &lt;- data.frame(&quot;holder&quot; = 1:dim(speed_dating)[1]) for (i in 1:nrow(speed_dating)){ pid = speed_dating[i, &#39;pid&#39;] tmp[i,1] &lt;- speed_dating[which(speed_dating$iid == pid)[1], x] } for (i in 1:nrow(speed_dating)) { result[i,1] &lt;- if_else((tmp[i,1] &gt;=7 &amp; speed_dating[i,x]&gt;=7), &#39;Yes&#39;, &#39;No&#39;) } return(result) } names = colnames(speed_dating %&gt;% select(sports:yoga)) common_features &lt;- as.data.frame(do.call(cbind,lapply(names, f))) colnames(common_features)&lt;- paste0(&#39;same&#39;,colnames(speed_dating %&gt;% select(sports:yoga))) speed_dating &lt;- cbind(speed_dating, common_features) speed_dating &lt;- speed_dating[, !duplicated(colnames(speed_dating))] # drop unecessary columns and missing data drops = c(&#39;plocation&#39;, &#39;pfield&#39;) keeps = append(colnames(speed_dating %&gt;% select(sports:yoga)), c(&#39;samelocation&#39;, &#39;samefield&#39;)) speed_dating &lt;- speed_dating[complete.cases(speed_dating[,keeps]), ] ## end here # for mosaic plot # create a clean dataframe for each common feature sameracedata = speed_dating %&gt;% group_by(samerace, match) %&gt;% summarise(Freq = n()) %&gt;% ungroup() %&gt;% mutate(samerace = if_else(samerace == 1, &quot;Yes&quot;, &quot;No&quot;)) %&gt;% mutate(match = if_else(match == 1, &quot;Yes&quot;, &quot;No&quot;)) samelocationdata = speed_dating %&gt;% group_by(samelocation, match) %&gt;% summarize(Freq = n()) %&gt;% ungroup() %&gt;% mutate(match = if_else(match == 1, &quot;Yes&quot;, &quot;No&quot;)) samefielddata = speed_dating %&gt;% group_by(samefield, match) %&gt;% summarize(Freq = n()) %&gt;% ungroup() %&gt;% mutate(match = if_else(match == 1, &quot;Yes&quot;, &quot;No&quot;)) samesportsdata = speed_dating %&gt;% group_by(samesports, match) %&gt;% summarize(Freq = n()) %&gt;% ungroup() %&gt;% mutate(match = if_else(match == 1, &quot;Yes&quot;, &quot;No&quot;)) samereadingdata = speed_dating %&gt;% group_by(samereading, match) %&gt;% summarize(Freq = n()) %&gt;% ungroup() %&gt;% mutate(match = if_else(match == 1, &quot;Yes&quot;, &quot;No&quot;)) samemoviesdata = speed_dating %&gt;% group_by(samemovies, match) %&gt;% summarize(Freq = n()) %&gt;% ungroup() %&gt;% mutate(match = if_else(match == 1, &quot;Yes&quot;, &quot;No&quot;)) cat( paste( &#39;&lt;script&gt; var sameracedata = &#39;,toJSON(sameracedata),&#39;; var samelocationdata = &#39;,toJSON(samelocationdata),&#39;; var samefielddata = &#39;,toJSON(samefielddata),&#39;; var samesportsdata = &#39;,toJSON(samesportsdata),&#39;; var samereadingdata = &#39;,toJSON(samereadingdata),&#39;; var samemoviesdata = &#39;,toJSON(samemoviesdata),&#39;; &lt;/script&gt;&#39; , sep=&quot;&quot;) ) ## &lt;script&gt; ## var sameracedata = [{&quot;samerace&quot;:&quot;No&quot;,&quot;match&quot;:&quot;No&quot;,&quot;Freq&quot;:4128},{&quot;samerace&quot;:&quot;No&quot;,&quot;match&quot;:&quot;Yes&quot;,&quot;Freq&quot;:786},{&quot;samerace&quot;:&quot;Yes&quot;,&quot;match&quot;:&quot;No&quot;,&quot;Freq&quot;:2732},{&quot;samerace&quot;:&quot;Yes&quot;,&quot;match&quot;:&quot;Yes&quot;,&quot;Freq&quot;:564}]; ## var samelocationdata = [{&quot;samelocation&quot;:&quot;No&quot;,&quot;match&quot;:&quot;No&quot;,&quot;Freq&quot;:6796},{&quot;samelocation&quot;:&quot;No&quot;,&quot;match&quot;:&quot;Yes&quot;,&quot;Freq&quot;:1336},{&quot;samelocation&quot;:&quot;Yes&quot;,&quot;match&quot;:&quot;No&quot;,&quot;Freq&quot;:64},{&quot;samelocation&quot;:&quot;Yes&quot;,&quot;match&quot;:&quot;Yes&quot;,&quot;Freq&quot;:14}]; ## var samefielddata = [{&quot;samefield&quot;:&quot;No&quot;,&quot;match&quot;:&quot;No&quot;,&quot;Freq&quot;:6738},{&quot;samefield&quot;:&quot;No&quot;,&quot;match&quot;:&quot;Yes&quot;,&quot;Freq&quot;:1300},{&quot;samefield&quot;:&quot;Yes&quot;,&quot;match&quot;:&quot;No&quot;,&quot;Freq&quot;:122},{&quot;samefield&quot;:&quot;Yes&quot;,&quot;match&quot;:&quot;Yes&quot;,&quot;Freq&quot;:50}]; ## var samesportsdata = [{&quot;samesports&quot;:&quot;No&quot;,&quot;match&quot;:&quot;No&quot;,&quot;Freq&quot;:4904},{&quot;samesports&quot;:&quot;No&quot;,&quot;match&quot;:&quot;Yes&quot;,&quot;Freq&quot;:900},{&quot;samesports&quot;:&quot;Yes&quot;,&quot;match&quot;:&quot;No&quot;,&quot;Freq&quot;:1956},{&quot;samesports&quot;:&quot;Yes&quot;,&quot;match&quot;:&quot;Yes&quot;,&quot;Freq&quot;:450}]; ## var samereadingdata = [{&quot;samereading&quot;:&quot;No&quot;,&quot;match&quot;:&quot;No&quot;,&quot;Freq&quot;:2902},{&quot;samereading&quot;:&quot;No&quot;,&quot;match&quot;:&quot;Yes&quot;,&quot;Freq&quot;:524},{&quot;samereading&quot;:&quot;Yes&quot;,&quot;match&quot;:&quot;No&quot;,&quot;Freq&quot;:3958},{&quot;samereading&quot;:&quot;Yes&quot;,&quot;match&quot;:&quot;Yes&quot;,&quot;Freq&quot;:826}]; ## var samemoviesdata = [{&quot;samemovies&quot;:&quot;No&quot;,&quot;match&quot;:&quot;No&quot;,&quot;Freq&quot;:2008},{&quot;samemovies&quot;:&quot;No&quot;,&quot;match&quot;:&quot;Yes&quot;,&quot;Freq&quot;:448},{&quot;samemovies&quot;:&quot;Yes&quot;,&quot;match&quot;:&quot;No&quot;,&quot;Freq&quot;:4852},{&quot;samemovies&quot;:&quot;Yes&quot;,&quot;match&quot;:&quot;Yes&quot;,&quot;Freq&quot;:902}]; ## &lt;/script&gt; We then look at all the available features that could be of common interest in the dataset, and see if any of those features heavily impacts the chances of getting matched. calc_diff &lt;- function(x){ tmp &lt;- speed_dating %&gt;% group_by_(x, &#39;match&#39;) %&gt;% summarize(Freq = n()) %&gt;% ungroup() %&gt;% mutate(match = if_else(match == 1, &quot;Yes&quot;, &quot;No&quot;)) no_rate &lt;- tmp[2,3]/(tmp[2,3]+tmp[1,3]) yes_rate &lt;- tmp[4,3]/(tmp[3,3]+tmp[4,3]) return(yes_rate - no_rate) } cd_df &lt;- do.call(rbind,lapply(paste0(&#39;same&#39;,colnames(speed_dating %&gt;% select(sports:yoga))),calc_diff))*100 cd_df &lt;- cbind(cd_df, names) ggplot(cd_df,aes(x=Freq,y=fct_reorder(names,Freq)))+geom_point(color=&quot;blue&quot;)+ylab(&quot;&quot;)+xlab(&quot;Percent (%)&quot;)+ggtitle(&quot;Differences in Chance of Matching&quot;) "]
]
