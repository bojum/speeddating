[
["results.html", "Chapter 5 Results 5.1 Question: Will backrgound and common interests influence the match? Which feature is the most influential? 5.2 Question: do people with excess self-esteem get more romantic interest?", " Chapter 5 Results 5.1 Question: Will backrgound and common interests influence the match? Which feature is the most influential? To answer this question, we have to look at background and common interests seperately. Background includes three features: race, from, and field. We can do so by comparing the chance of matching by conditioning on whether they are from the same race, same from (location), and same field. Data Cleaning: we would like to append 6 indicator columns that indicates whether this person and his/her partner share that feature in common (actually 5 because samerace is available in the original data). library(ggplot2) library(tidyverse) library(vcd) ## Loading required package: grid library(jsonlite) ## ## Attaching package: &#39;jsonlite&#39; ## The following object is masked from &#39;package:purrr&#39;: ## ## flatten load(&#39;data/speed_dating.RData&#39;) # get feature values of the partner for (i in 1:nrow(speed_dating)) { # for each row, get partner&#39;s id pid = speed_dating[i, &#39;pid&#39;] # add temporary columns that holds partner&#39;s location, field, sports, reading, movies speed_dating[i, &#39;plocation&#39;] = speed_dating[which(speed_dating$iid == pid)[1], &#39;from&#39;] speed_dating[i, &#39;pfield&#39;] = speed_dating[which(speed_dating$iid == pid)[1], &#39;field&#39;] } # append indicator columns for location, field, and income speed_dating[&#39;samelocation&#39;] &lt;- if_else(speed_dating$from == speed_dating$plocation, &#39;Yes&#39;, &#39;No&#39;) speed_dating[&#39;samefield&#39;] &lt;- if_else(speed_dating$field == speed_dating$pfield, &#39;Yes&#39;, &#39;No&#39;) # get the feature values of all the hobbies of the partner f &lt;- function(x){ tmp &lt;- data.frame(&quot;holder&quot; = 1:dim(speed_dating)[1]) result &lt;- data.frame(&quot;holder&quot; = 1:dim(speed_dating)[1]) for (i in 1:nrow(speed_dating)){ pid = speed_dating[i, &#39;pid&#39;] tmp[i,1] &lt;- speed_dating[which(speed_dating$iid == pid)[1], x] } for (i in 1:nrow(speed_dating)) { result[i,1] &lt;- if_else((tmp[i,1] &gt;=7 &amp; speed_dating[i,x]&gt;=7), &#39;Yes&#39;, &#39;No&#39;) } return(result) } names = colnames(speed_dating %&gt;% select(sports:yoga)) common_features &lt;- as.data.frame(do.call(cbind,lapply(names, f))) colnames(common_features)&lt;- paste0(&#39;same&#39;,colnames(speed_dating %&gt;% select(sports:yoga))) speed_dating &lt;- cbind(speed_dating, common_features) speed_dating &lt;- speed_dating[, !duplicated(colnames(speed_dating))] # drop unecessary columns and missing data drops = c(&#39;plocation&#39;, &#39;pfield&#39;) keeps = append(colnames(speed_dating %&gt;% select(sports:yoga)), c(&#39;samelocation&#39;, &#39;samefield&#39;)) speed_dating_q1 &lt;- speed_dating[complete.cases(speed_dating[,keeps]), ] ## end here #save(speed_dating_q1, file = &quot;data/speed_dating_q1.Rdata&quot;) load(file = &quot;data/speed_dating_q1.Rdata&quot;) speed_dating &lt;- speed_dating_q1 names = colnames(speed_dating %&gt;% select(sports:yoga)) # for mosaic plot # create a clean dataframe for each common feature sameracedata = speed_dating %&gt;% group_by(samerace, match) %&gt;% summarise(Freq = n()) %&gt;% ungroup() %&gt;% mutate(samerace = if_else(samerace == 1, &quot;Yes&quot;, &quot;No&quot;)) %&gt;% mutate(match = if_else(match == 1, &quot;Yes&quot;, &quot;No&quot;)) samelocationdata = speed_dating %&gt;% group_by(samelocation, match) %&gt;% summarize(Freq = n()) %&gt;% ungroup() %&gt;% mutate(match = if_else(match == 1, &quot;Yes&quot;, &quot;No&quot;)) samefielddata = speed_dating %&gt;% group_by(samefield, match) %&gt;% summarize(Freq = n()) %&gt;% ungroup() %&gt;% mutate(match = if_else(match == 1, &quot;Yes&quot;, &quot;No&quot;)) samesportsdata = speed_dating %&gt;% group_by(samesports, match) %&gt;% summarize(Freq = n()) %&gt;% ungroup() %&gt;% mutate(match = if_else(match == 1, &quot;Yes&quot;, &quot;No&quot;)) samereadingdata = speed_dating %&gt;% group_by(samereading, match) %&gt;% summarize(Freq = n()) %&gt;% ungroup() %&gt;% mutate(match = if_else(match == 1, &quot;Yes&quot;, &quot;No&quot;)) samemoviesdata = speed_dating %&gt;% group_by(samemovies, match) %&gt;% summarize(Freq = n()) %&gt;% ungroup() %&gt;% mutate(match = if_else(match == 1, &quot;Yes&quot;, &quot;No&quot;)) cat( paste( &#39;&lt;script&gt; var sameracedata = &#39;,toJSON(sameracedata),&#39;; var samelocationdata = &#39;,toJSON(samelocationdata),&#39;; var samefielddata = &#39;,toJSON(samefielddata),&#39;; var samesportsdata = &#39;,toJSON(samesportsdata),&#39;; var samereadingdata = &#39;,toJSON(samereadingdata),&#39;; var samemoviesdata = &#39;,toJSON(samemoviesdata),&#39;; &lt;/script&gt;&#39; , sep=&quot;&quot;) ) ## &lt;script&gt; ## var sameracedata = [{&quot;samerace&quot;:&quot;No&quot;,&quot;match&quot;:&quot;No&quot;,&quot;Freq&quot;:3398},{&quot;samerace&quot;:&quot;No&quot;,&quot;match&quot;:&quot;Yes&quot;,&quot;Freq&quot;:620},{&quot;samerace&quot;:&quot;Yes&quot;,&quot;match&quot;:&quot;No&quot;,&quot;Freq&quot;:2164},{&quot;samerace&quot;:&quot;Yes&quot;,&quot;match&quot;:&quot;Yes&quot;,&quot;Freq&quot;:476}]; ## var samelocationdata = [{&quot;samelocation&quot;:&quot;No&quot;,&quot;match&quot;:&quot;No&quot;,&quot;Freq&quot;:5516},{&quot;samelocation&quot;:&quot;No&quot;,&quot;match&quot;:&quot;Yes&quot;,&quot;Freq&quot;:1082},{&quot;samelocation&quot;:&quot;Yes&quot;,&quot;match&quot;:&quot;No&quot;,&quot;Freq&quot;:46},{&quot;samelocation&quot;:&quot;Yes&quot;,&quot;match&quot;:&quot;Yes&quot;,&quot;Freq&quot;:14}]; ## var samefielddata = [{&quot;samefield&quot;:&quot;No&quot;,&quot;match&quot;:&quot;No&quot;,&quot;Freq&quot;:5460},{&quot;samefield&quot;:&quot;No&quot;,&quot;match&quot;:&quot;Yes&quot;,&quot;Freq&quot;:1054},{&quot;samefield&quot;:&quot;Yes&quot;,&quot;match&quot;:&quot;No&quot;,&quot;Freq&quot;:102},{&quot;samefield&quot;:&quot;Yes&quot;,&quot;match&quot;:&quot;Yes&quot;,&quot;Freq&quot;:42}]; ## var samesportsdata = [{&quot;samesports&quot;:&quot;No&quot;,&quot;match&quot;:&quot;No&quot;,&quot;Freq&quot;:4012},{&quot;samesports&quot;:&quot;No&quot;,&quot;match&quot;:&quot;Yes&quot;,&quot;Freq&quot;:746},{&quot;samesports&quot;:&quot;Yes&quot;,&quot;match&quot;:&quot;No&quot;,&quot;Freq&quot;:1550},{&quot;samesports&quot;:&quot;Yes&quot;,&quot;match&quot;:&quot;Yes&quot;,&quot;Freq&quot;:350}]; ## var samereadingdata = [{&quot;samereading&quot;:&quot;No&quot;,&quot;match&quot;:&quot;No&quot;,&quot;Freq&quot;:2408},{&quot;samereading&quot;:&quot;No&quot;,&quot;match&quot;:&quot;Yes&quot;,&quot;Freq&quot;:424},{&quot;samereading&quot;:&quot;Yes&quot;,&quot;match&quot;:&quot;No&quot;,&quot;Freq&quot;:3154},{&quot;samereading&quot;:&quot;Yes&quot;,&quot;match&quot;:&quot;Yes&quot;,&quot;Freq&quot;:672}]; ## var samemoviesdata = [{&quot;samemovies&quot;:&quot;No&quot;,&quot;match&quot;:&quot;No&quot;,&quot;Freq&quot;:1570},{&quot;samemovies&quot;:&quot;No&quot;,&quot;match&quot;:&quot;Yes&quot;,&quot;Freq&quot;:344},{&quot;samemovies&quot;:&quot;Yes&quot;,&quot;match&quot;:&quot;No&quot;,&quot;Freq&quot;:3992},{&quot;samemovies&quot;:&quot;Yes&quot;,&quot;match&quot;:&quot;Yes&quot;,&quot;Freq&quot;:752}]; ## &lt;/script&gt; We then look at all the available features that could be of common interest in the dataset, and see if any of those features heavily impacts the chances of getting matched. calc_diff &lt;- function(x){ tmp &lt;- speed_dating %&gt;% group_by_(x, &#39;match&#39;) %&gt;% summarize(Freq = n()) %&gt;% ungroup() %&gt;% mutate(match = if_else(match == 1, &quot;Yes&quot;, &quot;No&quot;)) no_rate &lt;- tmp[2,3]/(tmp[2,3]+tmp[1,3]) yes_rate &lt;- tmp[4,3]/(tmp[3,3]+tmp[4,3]) return(yes_rate - no_rate) } cd_df &lt;- do.call(rbind,lapply(paste0(&#39;same&#39;,colnames(speed_dating %&gt;% select(sports:yoga))),calc_diff))*100 ## Warning: group_by_() is deprecated. ## Please use group_by() instead ## ## The &#39;programming&#39; vignette or the tidyeval book can help you ## to program with group_by() : https://tidyeval.tidyverse.org ## This warning is displayed once per session. cd_df &lt;- cbind(cd_df, names) ggplot(cd_df,aes(x=Freq,y=fct_reorder(names,Freq)))+geom_point(color=&quot;blue&quot;)+ylab(&quot;&quot;)+xlab(&quot;Percent (%)&quot;)+ggtitle(&quot;Differences in Chance of Matching&quot;) 5.2 Question: do people with excess self-esteem get more romantic interest? Self-enhancement is one kind of motivation that makes people feel good and boost their confidence (https://en.wikipedia.org/wiki/Self-enhancement). Epley and Whitchurch’s work is one evidence supporting the idea that people tend to see themselves better that the reality (https://journals.sagepub.com/doi/abs/10.1177/0146167208318601?journalCode=pspc). The phenomenon is also known as “illusory superiority”, where the majority of people evaluates themself as better than the average. It is widely believed that confident people preform better in various tasks including in relationships (see Link). This section of the analysis focuses on this idea. Specifically, we want to know if confident people get more interests during the Speed Dating session. Given the dataset, we define confidence, or excess self-esteem, as how much higher a subject evaluates itself than other people rate the subject (peer score). That is, the varaible excess self-esteem is calculated by subtracting an averaged evaluation score given by others from the score given to self. A large positive difference indicates highly excess self-esteem. A large negative difference suggests very low self-esteem. The variable is called self-esteem in the analysis and peer score is an average score a subject received from other people. http://images.lipy.com/women-vs-men One distinct characteristics of participants is gender. However, the previous question found no difference between genders. Moreover, this characteristics does not distinquish subjects in terms of their excess self-esteem. Below are distribution of score difference for each gender in each attribute. Their distribution are similar, peaking at around 1 with almost identical spread. attr_list &lt;- c(&quot;amb&quot;=&quot;Ambitious&quot;, &quot;attr&quot;=&quot;Attractive&quot;, &quot;fun&quot;=&quot;Fun&quot;, &quot;intel&quot;=&quot;Intelligent&quot;, &quot;sinc&quot;=&quot;Sincere&quot;) ggplot(eval_df %&gt;% mutate(gender = ifelse(gender == 0, &quot;Female&quot;, &quot;Male&quot;), gender = as.factor(gender), attr = attr_list[attr]), aes(x=diff_before, fill = gender)) + geom_density(alpha = 0.5) + ggtitle(&quot;Histogram of Evaluation Ratio&quot;) + xlab(&quot;Ratio&quot;) + facet_grid(~attr) When self-esteem is plotted against the proportion of people who want to meet with a subject again, referred to as interest proportion, the only small difference between gender is that female participants tend to get higher interest proportion than male participants. This is shown by more red dots locating at the top and more blue dots at the bottom of the graph. However, dots at the top and the bottom constitute only a small number of participants. Therefore, this analysis treat both genders collectively. ## color by gender ggplot(diff_df, aes(x=diff_before, y = proportion, color = gender)) + geom_point(alpha = 0.5) + facet_grid(~attr) + xlab(&quot;Self Esteem&quot;) + ylab(&quot;Interest Proportion&quot;) The plots above also suggest that people with excess self-esteem generally have low interest proportion. The correlation is stronger in fun and attractive, with the most negative correlation in attractive. That is, a participant with lower self-esteem in his/her own attractive and fun tend to get more romatic interest from the others. cor_list &lt;- lapply(eval_df$attr %&gt;% unique(), function(a){ attr_eval_df &lt;- eval_df%&gt;% ungroup() %&gt;% filter(attr == a) %&gt;% select(diff_before, proportion) c &lt;- cor(attr_eval_df$diff_before, attr_eval_df$proportion) return(data.frame(&quot;Attribute&quot;=a, &quot;Correlation&quot; = c)) }) attr_list &lt;- c(&quot;attr&quot;=&quot;Attractive&quot;, &quot;sinc&quot;=&quot;Sincere&quot;, &quot;amb&quot;=&quot;Ambitious&quot;, &quot;fun&quot;=&quot;Fun&quot;, &quot;intel&quot;=&quot;Intelligent&quot;) cor_df &lt;- do.call(rbind, cor_list) %&gt;% mutate(Attribute = attr_list[Attribute]) cor_df %&gt;% kable() %&gt;% kable_styling() Attribute Correlation Attractive -0.1857069 Sincere -0.4475117 Ambitious -0.2780918 Fun -0.3056818 Intelligent -0.1804723 The fact that attractive has the strongest correlation with interest proportion should not be surprising since it is the attribute that people look for the most in their partner (discussed in previous question). The next part narrows its focus down to attractive attribute only. Below is a plot of peer score against interest proportion. Data points are colored by self esteem. Darker color indicates a person with lower self-esteem. ggplot(diff_df %&gt;% filter(attr == &quot;attr&quot;) %&gt;% rename(self_esteem = diff_before), aes(x=peer_score , y = proportion, color = self_esteem)) + geom_point() + xlab(&quot;Peer Score&quot;) + ylab(&quot;Interest Proportion&quot;) The plot shows a linear relationship between peer evaluation score and interest proportion. A person who, othter people think, is attractive gain more romantic interest proportion, especially when average score is below 5. The linear relationship becomes weaker for those with score larger than 6. We also found that people who are less confident in their attractiveness tend to get more interests. This is shown by darker dots at the top right of the plot. Poeple with low self esteem gain more proportion of interest. Before jumping into a conclusion that being attractive is what matters, we inspect other characteristics of subjects. We are curious whether there are some confounding varaibles (other than what has been explored in the previous questions) that get a subject more romantic interest. All the graphs below are relationships between peer score on attractive and interest proportion. Dots are colored by other characterisitcs that we want to inspect. 5.2.0.1 Race race_list &lt;- c(&quot;Black/African American&quot;, &quot;European/Caucasian-American&quot;, &quot;Latino/Hispanic American&quot;, &quot;Asian/Pacific Islander/Asian-American&quot;, &quot;Native American&quot;, &quot;Other&quot;) pl1 &lt;- ggplot(diff_df %&gt;% filter(attr == &quot;attr&quot;) %&gt;% select(iid, race) %&gt;% group_by(race) %&gt;% summarize(cnt = n()) %&gt;% mutate(race = race_list[race]), aes(x = fct_reorder(race, cnt), y = cnt, fill = race)) + geom_col() + coord_flip() + xlab(&quot;&quot;) + ylab(&quot;count&quot;) + theme(legend.position = &quot;none&quot;) pl2 &lt;- ggplot(diff_df %&gt;% filter(attr == &quot;attr&quot;) %&gt;% mutate(race = race_list[race]), aes(x=peer_score, y = proportion, color = race)) + geom_point(alpha = 1) + xlab(&quot;Peer Score for Attractive&quot;) + ylab(&quot;Interest Proportion&quot;) ggplotly(pl1, tooltip = c(&quot;cnt&quot;)) ggplotly(pl2, tooltip = c(&quot;race&quot;)) #subplot(ggplotly(pl1, tooltip = c(&quot;cnt&quot;)), ggplotly(pl2, tooltip = c(&quot;race&quot;)),nrows=1) We find no pattern among proportion, peer_score, and race. 5.2.0.2 Field of Study field_list &lt;- c(&quot;Law&quot;, &quot;Math&quot;, &quot;Social Science&quot;, &quot;Psychologist&quot;, &quot;Medical Science&quot;, &quot;Pharmaceuticals and Bio Tech&quot;, &quot;Engineering&quot;, &quot;English/Creative Writing/ Journalism&quot;, &quot;History/Religion/Philosophy&quot;, &quot;Business/Econ/Finance&quot;, &quot;Education, Academia&quot;, &quot;Biological Sciences/Chemistry/Physics&quot;, &quot;Social Work&quot;, &quot;Undergrad/undecided&quot;, &quot;Political Science/International Affairs&quot;, &quot;Film&quot;, &quot;Fine Arts/Arts Administration&quot;, &quot;Languages&quot;, &quot;Architecture&quot;, &quot;Other&quot;) pl1 &lt;- ggplot(diff_df %&gt;% filter(attr == &quot;attr&quot;, !is.na(field_cd)) %&gt;% select(iid, field_cd) %&gt;% group_by(field_cd) %&gt;% summarize(cnt = n()) %&gt;% mutate(field_cd = field_list[field_cd]), aes(x = fct_reorder(field_cd, cnt), y = cnt, fill = field_cd)) + geom_col() + coord_flip() + xlab(&quot;&quot;) + ylab(&quot;count&quot;) + theme(legend.position = &quot;none&quot;) ## field X pl2 &lt;- ggplot(diff_df %&gt;% filter(attr == &quot;attr&quot;, !is.na(field_cd)) %&gt;% mutate(field_cd = field_list[field_cd]), aes(x=peer_score, y = proportion, color = field_cd)) + geom_point(alpha = 1) + xlab(&quot;Attractive Peer Score&quot;) + ylab(&quot;Interest Proportion&quot;) ggplotly(pl1, tooltip = c(&quot;cnt&quot;)) ggplotly(pl2, tooltip = c(&quot;field_cd&quot;)) #subplot(ggplotly(pl1, tooltip = c(&quot;cnt&quot;)), ggplotly(pl2, tooltip = c(&quot;field_cd&quot;)), nrows=1) fc &lt;- read.csv(&quot;data/field_cat.csv&quot;) %&gt;% mutate(cd = row_number()) cat_list &lt;- fc$cat %&gt;% as.character() names(cat_list) &lt;- fc$cd diff_df &lt;- diff_df %&gt;% mutate(field_cate_cd = cat_list[field_cd]) In addition to considering individual majors, we create major categories to see any general pattern that involves in school majors. pl1 &lt;- ggplot(diff_df %&gt;% filter(attr == &quot;attr&quot;, !is.na(field_cate_cd)) %&gt;% select(iid, field_cate_cd)%&gt;% group_by(field_cate_cd) %&gt;% summarize(cnt = n()), aes(x = fct_reorder(field_cate_cd, cnt), y = cnt, fill = field_cate_cd)) + geom_col() + coord_flip() + xlab(&quot;&quot;) + ylab(&quot;count&quot;) + theme(legend.position = &quot;none&quot;) pl2 &lt;- ggplot(diff_df %&gt;% filter(attr == &quot;attr&quot;, !is.na(field_cate_cd)), aes(x=peer_score, y = proportion, color = field_cate_cd)) + geom_point(alpha = 1) + theme(legend.position = &quot;none&quot;) + xlab(&quot;Attractive Peer Score&quot;) + ylab(&quot;Interest Proportion&quot;) ggplotly(pl1, tooltip = c(&quot;cnt&quot;)) ggplotly(pl2, tooltip = c(&quot;field_cate_cd&quot;)) #subplot(ggplotly(pl1, tooltip = c(&quot;cnt&quot;)), ggplotly(pl2, tooltip = c(&quot;field_cate_cd&quot;)), nrows=1) There is also no pattern among proportion, peer_score, and study field. As far as we know, attractiveness is the only characteristic that have the strongest correlation with interest propotion. In conclusion, we found that people with low self esteem in their attractiveness gain more romantic interest after the event. "]
]
